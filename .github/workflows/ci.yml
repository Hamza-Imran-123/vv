name: PHP CI and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up PHP 8.2
    - name: Set up PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    # Step 3: Install PHP dependencies
    - name: Install PHP dependencies
      run: composer install

    # Step 4: Set up Node.js (for npm)
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    # Step 5: Install Node.js dependencies and build
    - name: Install Node.js dependencies & build
      run: npm install && npm run build

    # Step 6: Test MySQL connection from GitHub Actions (check if DB is accessible)
    - name: Test MySQL Connection
      run: |
        mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} -e "SHOW DATABASES;"
      continue-on-error: true  # Continue even if this step fails to not stop the workflow

    # Step 7: Run database migrations (ensure database is accessible)
    - name: Run database migrations
      run: php artisan migrate --force
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    # Step 8: Deploy the application to a remote server
    - name: Deploy to Remote Server
      env:
        HOST: ${{ secrets.SERVER_HOST }}
        USER: ${{ secrets.SERVER_USER }}
        SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
        rsync -avz --exclude='node_modules' --exclude='.git' ./ $USER@$HOST:/path/to/your/app/
        ssh $USER@$HOST 'cd /path/to/your/app && php artisan migrate --force && php artisan config:cache && php artisan route:cache'
